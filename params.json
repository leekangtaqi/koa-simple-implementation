{"name":"Webgeeklee.GitHub.io","tagline":"MrLeeTechBlog","body":"# Simple Koa middleware implementation\r\n\r\n## You can use the middleware like this.\r\n    \r\n    var app = require('./koa');\r\n    var fs = require('fs');\r\n    var thunkify = require('./thunkify');\r\n    var readFile = thunkify(fs.readFile);\r\n\r\n    app.use(function* (req, res, next){\r\n\tconsole.log(\"middleware1 dosomething----\");\r\n\tvar file = yield readFile('./test.html');\r\n\tconsole.log(\"middleware1 file is loaded, content is----\" + file);\r\n\tyield next;\r\n\tconsole.log(\"middleware1 reload\");\r\n    });\r\n\r\n    app.use(function* (req, res, next){\r\n\tconsole.log(\"middleware2 dosomething----\");\r\n\tvar file = yield readFile('./test.html');\r\n\tconsole.log(\"middleware2 file is loaded, content is----\" + file);\r\n\tconsole.log(\"middleware2 reload\");\r\n    });\r\n\r\n## The simple koa implementation\r\n    var EventEmitter = require('events').EventEmitter;\r\n    var _id = 0;\r\n\r\n    function Koa(){\r\n\tthis._mwFnMap = [];\r\n    }\r\n\r\n    function Worker(gen){\r\n\tthis.g = gen;\r\n\tthis.busy = false;\r\n\tthis.ctx = null;\r\n\tthis._id = 0;\r\n    }\r\n\r\n    Worker.prototype = Object.create(new EventEmitter());\r\n\r\n    function Request(){\r\n\tthis.query = {};\r\n\tthis.body = {};\r\n    }\r\n\r\n    Request.prototype = {\r\n\t\r\n    }\r\n\r\n    function Response(){\r\n\tthis.body = {};\r\n    }\r\n\r\n    Response.prototype = {\r\n\twrite: function(str){\r\n\t\tconsole.log(\"res is write---\" + str);\r\n\t},\r\n\tend: function(){\r\n\t\tconsole.log(\"res is end---\" + str);\r\n\t}\r\n    }\r\n\r\n    Koa.prototype.use = function(fn){\r\n\tthis._mwFnMap[_id++] = fn;\r\n    }\r\n\r\n    var workersQueue = [];\r\n    //control the flow\r\n    function _rigistryWorker(mwFnMap, req, res, next){\r\n\tvar worker = new Worker();\r\n\tfor(var i = 0, len = mwFnMap.length; i < len; i++){\r\n\t\tvar g = function(){\r\n\t\t\treturn mwFnMap[i].call(null, req, res, next)\r\n\t\t}();\r\n\t\tvar worker = new Worker(g);\r\n\t\tworker._id = i;\r\n\t\tworkersQueue.push(worker);\r\n\t}\t\r\n    }\r\n    Koa.prototype.start = function(){\r\n\tvar req = new Request();\r\n\tvar res = new Response();\r\n\tvar next = \"next\";\r\n\tvar index = 0;\r\n\r\n\t_rigistryWorker(this._mwFnMap, req, res, next);\r\n\r\n\tvar w = workersQueue[index];\r\n\tfunction recur(w, data){\r\n\t\tvar result = w.g.next(data);\r\n\t\tif(result.done){\r\n\t\t\tvar prevworker = workersQueue[--index];\r\n\t\t\tif(prevworker){\r\n\t\t\t\trecur(prevworker);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t};\r\n\t\tif(result.value == \"next\"){\r\n\t\t\tw.busy = true;\r\n\t\t\tw.emit('continue');\r\n\t\t\tvar nextworker = workersQueue[++index];\r\n\t\t\tif(nextworker){\r\n\t\t\t\trecur(nextworker);\r\n\t\t\t}\r\n\t\t} \r\n\t\tif(!(w.busy)){\r\n\t\t\tresult.value(function(err, data) {\r\n\t\t\t\trecur(w, data);\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tw.once('continue', function(){\r\n\t\t\t\tw.busy = !(w.busy);\r\n\t\t\t\trecur(w, data);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\trecur(w);\r\n    }\r\n\r\n    module.exports = new Koa();\r\n# ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}